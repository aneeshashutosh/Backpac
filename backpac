#! /bin/bash
#
#	BACKPAC
#
#	An Arch Backup script with Rsync and Tar
# 	Cole Smith | css459@cims.nyu.edu

# Reads configuration given a file
function parse_conf
{
	INPUT_CONFIG=$1

	# Replace '~' with the users home folder
	USER_HOME=$(eval echo ~${SUDO_USER})
	INPUT_CONFIG=${INPUT_CONFIG/~/$USER_HOME}

	if [ -n "$INPUT_CONFIG" ]; then
		BACKUP_PATH=$(awk -F ' *= *' '$1=="BACKUP_PATH" {print $2}' ${INPUT_CONFIG})
		EXCLUDE_LIST=$(awk -F ' *= *' '$1=="EXCLUDE_LIST" {print $2}' ${INPUT_CONFIG})
		DEST_DISK=$(awk -F ' *= *' '$1=="DEST_DISK" {print $2}' ${INPUT_CONFIG})
		FILE_PATH=$(awk -F ' *= *' '$1=="FILE_PATH" {print $2}' ${INPUT_CONFIG})
		FILE_NAME=$(awk -F ' *= *' '$1=="FILE_NAME" {print $2}' ${INPUT_CONFIG})
		COMPRESSION=$(awk -F ' *= *' '$1=="COMPRESSION" {print $2}' ${INPUT_CONFIG})
		AUTOUNMOUNT=$(awk -F ' *= *' '$1=="AUTOUNMOUNT" {print $2}' ${INPUT_CONFIG})
	fi
}

# Check that we are root
if [ "$EUID" -ne 0 ]; then
	echo "Please run as root"
	exit 1
fi

# Parse default config file
USER_HOME=$(eval echo ~${SUDO_USER})
DEFAULT_CONFIG_PATH="${USER_HOME}/.config/backpac/config"
parse_conf ${DEFAULT_CONFIG_PATH}

# Append the current date to File Name
CURRENT_DATE=$(date +%Y-%m-%d)
FILE_NAME="${FILE_NAME}--${CURRENT_DATE}"

# Replace '~' with the users home folder
EXCLUDE_LIST=${EXCLUDE_LIST/"~"/$USER_HOME}

# Check if rsync in installed (required)
if ! type "rsync" &> /dev/null; then
	echo "Rsync not installed, exiting..."
	exit 1
fi

# Check that tar is optionally installed
if [ ${COMPRESSION} == true ]; then
	if ! type "tar" &> /dev/null; then
		echo "Compression is enabled but tar is not instlled. Will not compress." 
		COMPRESSION=false
	fi
fi

# Handle config overrides as arguments
OPTIND=1
CUSTOM_PAC=""

# Debugging
#------------------------------
echo ${DEFAULT_CONFIG_PATH}
echo ${CUSTOM_PAC}
echo ${BACKUP_PATH}
echo ${EXCLUDE_LIST}
echo ${DEST_DISK}
echo ${FILE_PATH}
echo ${FILE_NAME}
echo ${COMPRESSION}
echo ${AUTOUNMOUNT}
exit

while getopts "F:B:E:D:P:N:C:A:" opt; do
	case "$opt" in
	F)	CUSTOM_PAC=$OPTARG
		parse_conf ${CUSTOM_PAC}
		;;
	B)	BACKUP_PATH=$OPTARG
		;;
	E)	EXCLUDE_LIST=$OPTARG
		;;
	D)	DEST_DISK=$OPTARG
		;;
	P)	FILE_PATH=$OPTARG
		;;
	N)	FILE_NAME=$OPTARG
		;;
	C)	COMPRESSION=$OPTARG
		if [ ${COMPRESSION} == false ]; then 
			COMPRESSION=false 
		elif [ ${COMPRESSION} == true ]; then 
			COMPRESSION=true
		else
			echo "Config file erorr at COMPRESSION"
			exit 1
		fi
		;;
	A)	AUTOUNMOUNT=$OPTARG
		if [ ${AUTOUNMOUNT} == false ]; then 
			AUTOUNMOUNT=false 
		elif [ ${AUTOUNMOUNT} == true ]; then 
			AUTOUNMOUNT=true 
		else
			echo "Config file erorr at COMPRESSION"
			exit 1
		fi
		;;
	*)	echo "Unknown argument"
		exit 1
	esac
done

# Debugging
#------------------------------
#echo ${CUSTOM_PAC}
#echo ${BACKUP_PATH}
#echo ${EXCLUDE_LIST}
#echo ${DEST_DISK}
#echo ${FILE_PATH}
#echo ${FILE_NAME}
#echo ${COMPRESSION}
#echo ${AUTOUNMOUNT}
#------------------------------

# Check mount point, only if it is NOT "/"
if [ "$DEST_DISK" != "/" ]; then
	echo "Checking mount point: ${DEST_DISK}"
	if [ $(mount | grep -c ${DEST_DISK}) != 1 ]; then
		# Disk is not mounted
		echo "Disk not mounted, attempting remount"
		sudo mount -o rw ${DEST_DISK}
		if [ $(mount | grep -c ${DEST_DISK}) != 1 ]; then
			echo "Could not mount ${DEST_DISK} as read write"
			exit 1
		fi
	fi
fi

echo "Disk mounted successfully, continuing..."

# Check that we have a file path
if [[ -n "$FILE_PATH" ]]; then

	# Remove extra '/' if needed
	FILE_PATH=${FILE_PATH%/}
	FULL_PATH="$FILE_PATH/$FILE_NAME"

	echo "Backing up '${BACKUP_PATH}' to '${FULL_PATH}'"
	echo "----------------------------------------------"

	# Begin the backup operation
	sudo rsync -aAXH --human-readable --delete --info=progress2 --exclude-from=${EXCLUDE_LIST} ${BACKUP_PATH}  ${FULL_PATH}
	echo "----------------------------------------------"
	if [ $? -eq 0 ]; then
		echo "Backup successful"

		# Tarball the backup
		if [ ${COMPRESSION} == true ]; then
			echo "Compressing ${FULL_PATH} as ${FILE_NAME}.tar.gz"
			sudo tar czf "${FULL_PATH}.tar.gz" ${FULL_PATH}
			if [ $? -eq 0 ]; then
				# Clean up
				sudo rm -rf ${FULL_PATH}
				
				# Report size of compression
				echo "----------------------------------------------"
				echo "Final backup size: "
				sudo du -sh "${FULL_PATH}.tar.gz"
			fi
		fi

		# Auto-unmount, only if it is NOT "/"
		if [ ! "${DEST_DISK}" == "/" ]; then
			if [ ${AUTOUNMOUNT} == true ]; then
				echo "Unmounting backup disk: ${DEST_DISK} ..."
				sudo umount ${DEST_DISK}
				if [ $? -eq 0 ]; then
					echo "Umount successful"
				else
					echo "Failed to unmount ${DEST_DISK}"
					exit 1
				fi
			fi
		fi

		exit
	else
		echo "Rsync exited with errors (exit value ${?})"
		echo "Partial backup at ${FULL_PATH}"
		exit 1
	fi

else
	echo "Missing backup destination path, exiting..."
	exit 1
fi
